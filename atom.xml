<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sinos</title>
    <link>https://s1nos.cc/</link>
    
    <atom:link href="https://s1nos.cc/atom.xml" rel="self" type="application/rss+xml"/>
    
    <description>An Ordinary Learner</description>
    <pubDate>Wed, 01 Jun 2022 11:16:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>爬取豆瓣top250电影表单之数据可视化</title>
      <link>https://s1nos.cc/2022/06/01/22.6.1_1/</link>
      <guid>https://s1nos.cc/2022/06/01/22.6.1_1/</guid>
      <pubDate>Wed, 01 Jun 2022 11:12:51 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="数据库存储"><a href="#数据库存储" class="headerlink" title="数据库存储"></a>数据库存储</h2><p>在爬虫写完了，添加了一个新的功能，把爬取到的数据存到了数据库中。<br>在刚开始时了解到PyMySQL，但是用这么库只能用sql语句注入，效率非常低下。<br>在看了大量教程后，了解到了sqlAIchemy能方便地建立sql与pandas数据类型间的连接(类似与Mybatis?)  </p><p>部分代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入数据库</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正在写入数据库...&quot;</span>)</span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+mysqlconnector://root:root@localhost:3306/douban?charset=utf8&quot;</span>)</span><br><span class="line">conn = engine.connect()</span><br><span class="line"><span class="comment"># 读取csv</span></span><br><span class="line">df = pd.read_csv(<span class="string">r&#x27;douban_top250.csv&#x27;</span>, header=<span class="literal">None</span>, names=head)</span><br><span class="line">df.sort_values(<span class="string">&#x27;rank&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df = df.replace(<span class="string">&#x27;无&#x27;</span>, np.NaN)</span><br><span class="line"><span class="comment"># 写入sql 建立主键rank</span></span><br><span class="line">df.to_sql(<span class="string">&quot;douban_top250&quot;</span>, conn, index=<span class="literal">False</span>, index_label=<span class="string">&#x27;rank&#x27;</span>)</span><br><span class="line">conn.execute(<span class="string">&quot;&quot;&quot;ALTER TABLE `&#123;&#125;` ADD PRIMARY KEY (`&#123;&#125;`);&quot;&quot;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;douban_top250&#x27;</span>, <span class="string">&#x27;rank&#x27;</span>))</span><br><span class="line">conn.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;写入数据库成功!&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011753457.png" alt="vpn"></p><hr><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>(此段过程全程在jupyter notebook中完成)<br>pyecharts文档  <a href="https://pyecharts.org/#/">https://pyecharts.org/#/</a><br>pyecharts实例  <a href="https://gallery.pyecharts.org/#/">https://gallery.pyecharts.org/#/</a></p><h3 id="top250中的主要国家分布"><a href="#top250中的主要国家分布" class="headerlink" title="top250中的主要国家分布"></a>top250中的主要国家分布</h3><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">country</span>(<span class="params">situa</span>):</span><br><span class="line">    death = df[<span class="string">&#x27;area&#x27;</span>].<span class="built_in">str</span>.contains(situa)</span><br><span class="line">    Situa = df.loc[death]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(Situa)</span><br><span class="line">Country_value = [country(<span class="string">&#x27;中国&#x27;</span>), country(<span class="string">&#x27;美国&#x27;</span>), country(<span class="string">&#x27;英国&#x27;</span>), country(<span class="string">&#x27;法国&#x27;</span>), country(<span class="string">&#x27;意大利&#x27;</span>), country(<span class="string">&#x27;日本&#x27;</span>), \</span><br><span class="line">    country(<span class="string">&#x27;新西兰&#x27;</span>), country(<span class="string">&#x27;韩国&#x27;</span>), country(<span class="string">&#x27;瑞士&#x27;</span>), country(<span class="string">&#x27;印度&#x27;</span>), country(<span class="string">&#x27;波兰&#x27;</span>), country(<span class="string">&#x27;澳大利亚&#x27;</span>), country(<span class="string">&#x27;墨西哥&#x27;</span>), \</span><br><span class="line">        country(<span class="string">&#x27;卡塔尔&#x27;</span>), country(<span class="string">&#x27;黎巴嫩&#x27;</span>), country(<span class="string">&#x27;爱尔兰&#x27;</span>), country(<span class="string">&#x27;加拿大&#x27;</span>), country(<span class="string">&#x27;德国&#x27;</span>)]</span><br><span class="line">Country_attr = [<span class="string">&#x27;China&#x27;</span>, <span class="string">&#x27;United States&#x27;</span>, <span class="string">&#x27;United Kingdom&#x27;</span>, <span class="string">&#x27;France&#x27;</span>, <span class="string">&#x27;Italy&#x27;</span>, <span class="string">&#x27;Japan&#x27;</span>, <span class="string">&#x27;New Zealand&#x27;</span>, <span class="string">&#x27;Korea&#x27;</span>,\</span><br><span class="line">     <span class="string">&#x27;Swizetland&#x27;</span>, <span class="string">&#x27;India&#x27;</span>, <span class="string">&#x27;Poland&#x27;</span>, <span class="string">&#x27;Australia&#x27;</span>, <span class="string">&#x27;Mexico&#x27;</span>, <span class="string">&#x27;Qatar&#x27;</span>, <span class="string">&#x27;Lebanon&#x27;</span>, <span class="string">&#x27;Ireland&#x27;</span>, <span class="string">&#x27;Canada&#x27;</span>, <span class="string">&#x27;Germany&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Map - Map_world</span></span><br><span class="line"><span class="comment"># https://gallery.pyecharts.org/#/Map/map_world</span></span><br><span class="line">value = Country_value</span><br><span class="line">attr = Country_attr</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(attr)):</span><br><span class="line">    city_ionfo=[attr[index],value[index]]</span><br><span class="line">    data.append(city_ionfo)</span><br><span class="line">m = (</span><br><span class="line">    Map()</span><br><span class="line">    .add(<span class="string">&quot;世界地图&quot;</span>,data, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;top250电影制片国家&quot;</span>),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(max_=<span class="number">80</span>),</span><br><span class="line"> </span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">m.render_notebook()</span><br></pre></td></tr></table></figure><p>展示：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011831223.png" alt="vpn"></p><h4 id="Bar"><a href="#Bar" class="headerlink" title="Bar"></a>Bar</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bar - Bar_base</span></span><br><span class="line"><span class="comment"># https://gallery.pyecharts.org/#/Bar/bar_base</span></span><br><span class="line">x_choose=Country_attr</span><br><span class="line">y_values=Country_value</span><br><span class="line">b= (</span><br><span class="line">    Bar(</span><br><span class="line">        init_opts=opts.InitOpts(</span><br><span class="line">            theme=ThemeType.DARK,</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    .add_xaxis(x_choose)</span><br><span class="line">    .add_yaxis(<span class="string">&quot;电影数量&quot;</span>, y_values,)</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        </span><br><span class="line">        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=<span class="number">35</span>)),</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;top250电影制片国家对比&quot;</span>),</span><br><span class="line">        <span class="comment"># brush_opts=opts.BrushOpts(),</span></span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># .render(path=&#x27;柱状图.html&#x27;)</span></span><br><span class="line">)</span><br><span class="line">b.render_notebook()</span><br></pre></td></tr></table></figure><p>展示：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011835689.png" alt="vpn"></p><h4 id="Pie"><a href="#Pie" class="headerlink" title="Pie"></a>Pie</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Pie - Pie_rich_label</span><br><span class="line"># https://gallery.pyecharts.org/#/Pie/pie_rich_label</span><br><span class="line"></span><br><span class="line">sortedData = sorted(data, key=lambda st:st[1], reverse=True)</span><br><span class="line"></span><br><span class="line">p = (</span><br><span class="line">    Pie()</span><br><span class="line">    .add(</span><br><span class="line">        &quot;&quot;,</span><br><span class="line">        sortedData,</span><br><span class="line">        radius=[&quot;30%&quot;, &quot;45%&quot;],</span><br><span class="line">        label_opts=opts.LabelOpts(</span><br><span class="line">            position=&quot;outside&quot;,</span><br><span class="line">            formatter=&quot; &#123;b|&#123;b&#125;: &#125;&#123;c&#125;  &#123;per|&#123;d&#125;%&#125; &quot;,</span><br><span class="line">            background_color=&quot;#eee&quot;,</span><br><span class="line">            border_color=&quot;#aaa&quot;,</span><br><span class="line">            border_width=1,</span><br><span class="line">            border_radius=4,</span><br><span class="line">            rich=&#123;</span><br><span class="line">                &quot;a&quot;: &#123;&quot;color&quot;: &quot;#999&quot;, &quot;lineHeight&quot;: 22, &quot;align&quot;: &quot;center&quot;&#125;,</span><br><span class="line">                &quot;abg&quot;: &#123;</span><br><span class="line">                    &quot;backgroundColor&quot;: &quot;#e3e3e3&quot;,</span><br><span class="line">                    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">                    &quot;align&quot;: &quot;right&quot;,</span><br><span class="line">                    &quot;height&quot;: 20,</span><br><span class="line">                    &quot;borderRadius&quot;: [4, 4, 0, 0],</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;hr&quot;: &#123;</span><br><span class="line">                    &quot;borderColor&quot;: &quot;#aaa&quot;,</span><br><span class="line">                    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">                    &quot;borderWidth&quot;: 0.5,</span><br><span class="line">                    &quot;height&quot;: 0,</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;b&quot;: &#123;&quot;fontSize&quot;: 10, &quot;lineHeight&quot;: 18&#125;,</span><br><span class="line">                &quot;per&quot;: &#123;</span><br><span class="line">                    &quot;color&quot;: &quot;#eee&quot;,</span><br><span class="line">                    &quot;backgroundColor&quot;: &quot;#334455&quot;,</span><br><span class="line">                    &quot;padding&quot;: [2, 4],</span><br><span class="line">                    &quot;borderRadius&quot;: 2,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=&quot;top250电影制片国家比重&quot;),</span><br><span class="line">        legend_opts=opts.LegendOpts(is_show=False)</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">p.render_notebook()</span><br></pre></td></tr></table></figure><p>展示：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011837356.png" alt="vpn"></p><h3 id="电影评价人数or电影热度"><a href="#电影评价人数or电影热度" class="headerlink" title="电影评价人数or电影热度"></a>电影评价人数or电影热度</h3><h4 id="Bar2"><a href="#Bar2" class="headerlink" title="Bar2"></a>Bar2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bar - Bar_base</span></span><br><span class="line"><span class="comment"># https://gallery.pyecharts.org/#/Bar/bar_base</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line">rating_attr = []</span><br><span class="line">rating_value = []</span><br><span class="line">p_lists = df[<span class="string">&#x27;rating_people&#x27;</span>].sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    rating_attr.append(df[<span class="string">&#x27;film_name&#x27;</span>][p_lists.index[i]])</span><br><span class="line">    rating_value.append(<span class="built_in">int</span>(p_lists[p_lists.index[i]]))</span><br><span class="line"></span><br><span class="line">x_choose=rating_attr</span><br><span class="line">y_values=rating_value</span><br><span class="line"></span><br><span class="line">b2= (</span><br><span class="line">    Bar(init_opts=opts.InitOpts(</span><br><span class="line">        theme=ThemeType.DARK</span><br><span class="line">    ))</span><br><span class="line">    .add_xaxis(x_choose)</span><br><span class="line">    .add_yaxis(<span class="string">&quot;评价人数&quot;</span>, y_values)</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=<span class="number">30</span>), name=<span class="string">&quot;电影&quot;</span>),</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;top250电影评价人数&quot;</span>),</span><br><span class="line">        yaxis_opts=opts.AxisOpts(name=<span class="string">&quot;数量&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">b2.render_notebook()</span><br></pre></td></tr></table></figure><p>展示：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011838485.png" alt="vpn"></p><h3 id="电影类型"><a href="#电影类型" class="headerlink" title="电影类型"></a>电影类型</h3><h4 id="Pie2"><a href="#Pie2" class="headerlink" title="Pie2"></a>Pie2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pie - Customized_pie</span></span><br><span class="line"><span class="comment"># https://gallery.pyecharts.org/#/Pie/customized_pie</span></span><br><span class="line"></span><br><span class="line">f_type_lists = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df[<span class="string">&#x27;filmType&#x27;</span>])):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df[<span class="string">&#x27;filmType&#x27;</span>][i].split(<span class="string">&#x27;,&#x27;</span>))):</span><br><span class="line">        f_type_lists.append(df[<span class="string">&#x27;filmType&#x27;</span>][i].split(<span class="string">&#x27;,&#x27;</span>)[j].split(<span class="string">&quot;&#x27;&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;&#x27;&quot;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除元素中的空格和换行</span></span><br><span class="line">f_type_lists = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> f_type_lists <span class="keyword">if</span> x.strip() != <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df_f_type = pd.DataFrame(f_type_lists)</span><br><span class="line">df_f_type.value_counts()</span><br><span class="line">x_f_type_data = []</span><br><span class="line">y_f_type_data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df_f_type.value_counts())):</span><br><span class="line">    x_f_type_data.append(df_f_type.value_counts().index[i][<span class="number">0</span>])</span><br><span class="line">    y_f_type_data.append(<span class="built_in">int</span>(df_f_type.value_counts()[i]))</span><br><span class="line">    data_pair = [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(x_f_type_data, y_f_type_data)]</span><br><span class="line">data_pair.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">p2=(</span><br><span class="line">    Pie(</span><br><span class="line">        init_opts=opts.InitOpts(</span><br><span class="line">            theme=ThemeType.DARK</span><br><span class="line">        ))</span><br><span class="line">    .add(</span><br><span class="line">        series_name=<span class="string">&quot;类型&quot;</span>,</span><br><span class="line">        data_pair=data_pair,</span><br><span class="line">        rosetype=<span class="string">&quot;radius&quot;</span>,</span><br><span class="line">        radius=<span class="string">&quot;55%&quot;</span>,</span><br><span class="line">        center=[<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>, position=<span class="string">&quot;center&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(</span><br><span class="line">            title=<span class="string">&quot;电影类型&quot;</span>,</span><br><span class="line">            pos_left=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">            pos_top=<span class="string">&quot;20&quot;</span>,</span><br><span class="line">            title_textstyle_opts=opts.TextStyleOpts(color=<span class="string">&quot;#fff&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_series_opts(</span><br><span class="line">        tooltip_opts=opts.TooltipOpts(</span><br><span class="line">            trigger=<span class="string">&quot;item&quot;</span>, formatter=<span class="string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot;</span></span><br><span class="line">        ),</span><br><span class="line">        label_opts=opts.LabelOpts(color=<span class="string">&quot;rgba(255, 255, 255, 0.3)&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">p2.render_notebook()</span><br></pre></td></tr></table></figure><p>展示：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011839140.png" alt="vpn"></p><h3 id="电影年份"><a href="#电影年份" class="headerlink" title="电影年份"></a>电影年份</h3><h4 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Line - Line_base</span></span><br><span class="line"><span class="comment"># https://gallery.pyecharts.org/#/Line/line_base</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出年份, 计数排序</span></span><br><span class="line">releaseYear = pd.to_datetime(df[<span class="string">&#x27;initialReleaseDate&#x27;</span>])</span><br><span class="line">releaseYear = pd.DatetimeIndex(releaseYear).year</span><br><span class="line">releaseYear = releaseYear.value_counts().sort_index()</span><br><span class="line"></span><br><span class="line">xais = []</span><br><span class="line">yais = []</span><br><span class="line">xais = releaseYear.index.tolist()</span><br><span class="line">yais = releaseYear.values.tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># xaxis只能识别字符串，将xais数组元素改为字符串类型</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xais)):</span><br><span class="line">    xais[i] = <span class="built_in">str</span>(xais[i])</span><br><span class="line"></span><br><span class="line">l=(</span><br><span class="line">    Line()</span><br><span class="line">    .add_xaxis(xaxis_data=xais)</span><br><span class="line">    .add_yaxis(</span><br><span class="line">        series_name=<span class="string">&quot;&quot;</span>,</span><br><span class="line">        y_axis=yais,</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;top250电影年份&quot;</span>),</span><br><span class="line">        )</span><br><span class="line">)</span><br><span class="line">l.render_notebook()</span><br></pre></td></tr></table></figure><p>展示：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011841403.png" alt="vpn"></p><h3 id="演员参演数"><a href="#演员参演数" class="headerlink" title="演员参演数"></a>演员参演数</h3><h4 id="Funnel"><a href="#Funnel" class="headerlink" title="Funnel"></a>Funnel</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Funnel - Funnel_base</span></span><br><span class="line"><span class="comment"># https://gallery.pyecharts.org/#/Funnel/funnel_base</span></span><br><span class="line">actors = df[<span class="string">&#x27;actor&#x27;</span>]</span><br><span class="line">actors = pd.Series([<span class="built_in">str</span>(line).strip(<span class="string">&#x27;[&#x27;</span>).strip(<span class="string">&#x27;]&#x27;</span>) <span class="keyword">for</span> line <span class="keyword">in</span> actors])</span><br><span class="line">actors = actors.<span class="built_in">str</span>.split(<span class="string">&#x27;,&#x27;</span>, expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">actors_index = pd.concat([actors.loc[<span class="number">0</span>], actors.loc[<span class="number">1</span>]], axis=<span class="number">0</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(actors)):</span><br><span class="line">    actors_index = pd.concat([actors_index, actors.loc[i]], axis=<span class="number">0</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line">actors_index.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line">actors_index = actors_index.<span class="built_in">str</span>.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">actors_sort = actors_index.value_counts().sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">x_data = actors_sort.index.to_list()</span><br><span class="line">y_data = actors_sort.values.tolist()</span><br><span class="line"></span><br><span class="line">p_data = []</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    p_ionfo=[x_data[index],y_data[index]]</span><br><span class="line">    p_data.append(p_ionfo)</span><br><span class="line">p_data</span><br><span class="line">f = (</span><br><span class="line">    Funnel()</span><br><span class="line">    .add(</span><br><span class="line">        <span class="string">&quot;参演&quot;</span>, </span><br><span class="line">        p_data, </span><br><span class="line">        label_opts=opts.LabelOpts(position=<span class="string">&quot;inside&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts = opts.TitleOpts(title=<span class="string">&quot;top250电影参演人员&quot;</span>),</span><br><span class="line">        legend_opts= opts.LegendOpts(is_show=<span class="literal">False</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="comment"># .render(&quot;funnel_base.html&quot;)</span></span><br><span class="line">)</span><br><span class="line">f.render_notebook()</span><br></pre></td></tr></table></figure><p>展示：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011843515.png" alt="vpn"></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>根据以上展示的图表，我们可以观察到美国的文化意识输出还是非常强的，对于在豆瓣上的观众来说，对美国的电影评价更改，我还发现其中有很多老电影。<br>其次就是中国日本以及老牌欧洲国家(法、德、英)的电影更能收到平台观众的青睐。<br>在电影评价中，电影评价数多的电影一般分为两种，一种是电影本身质量过硬，另一种就是电影带来的社会话题讨论。一般评价数高的电影，也都比较好。<br>对于电影类型来说就没有那么看得出一些东西，剧情类占了188个，但是电影要说跟剧情不沾边我觉得不可能，所以这个剧情一般没用，去掉剧情可以看到，爱情和喜剧比较多。<br>根据电影年份则可以看出93年以后出品的电影更能受到观众喜爱。<br>根据参演人员则可了解到哪些演员的电影更能受观众喜爱。雨果·维文就是《黑客帝国》中的史密斯探员，艾伦·瑞克曼参演了哈利波特系列，周星驰的喜剧深受国人们喜爱。</p><h2 id="数据处理与可视化技术总结"><a href="#数据处理与可视化技术总结" class="headerlink" title="数据处理与可视化技术总结"></a>数据处理与可视化技术总结</h2><p>利用pyecharts进行可视化比较简单，只需要将需要的数据传给函数，就会自动渲染出图片，但是处理数据的过程就显得比较困难了。<br>在用pandas的过程中踩了非常多的雷，几乎每一个细节的操作都需要查查官方文档才能正确的执行，当然做出来之后会更加有成就感。(pandas官方文档**<a href="https://pandas.pydata.org/">https://pandas.pydata.org/</a>**)<br>因此，用python做数据处理需要熟练运用pandas，在做的过程中也算是恶补了一下。<br>该项目到此算是完成了，如果有修改会补充，代码中需要的注释也会陆续补上。</p>]]></content:encoded>
      
      
      
      
      <comments>https://s1nos.cc/2022/06/01/22.6.1_1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>爬取豆瓣top250电影表单</title>
      <link>https://s1nos.cc/2022/05/08/22.5.8_1/</link>
      <guid>https://s1nos.cc/2022/05/08/22.5.8_1/</guid>
      <pubDate>Sun, 08 May 2022 10:50:47 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><hr><p>爬虫是获取数据一种方式，能够按照一定规则自动抓取某个网站或者万维网信息的程序；现实环境中很大一部分网络访问都是由爬虫造成的；我们来看一个常见应用场景：<br>当我们使用百度或者其他搜索引擎搜索某个关键字的时候，搜索结果中会包含对应的内容，比如：搜索Python，搜索结果可能包括Python官网，Python相关文章等，可是这些信息分布在不同的网站，这些搜索引擎是如何知道这些信息与相对应的地址呢？也许是搜索引擎获取网站相关数据及对应的地址；python的官网应该不可能主动把相应数据给这些搜索引擎公司，那么这些数据是如何获取的呢？最可能的答案，搜索引擎公司按照一定的规则将这些网站的信息抓取下来，保存到本地，然后对数据进行清洗处理，这些数据是搜索网站的基础，而获取数据过程就是爬虫所做的事情。<br>根据爬取方式不同我们可以将爬虫分为两类：</p><ul><li>1.增量型爬虫：不会限制抓取数据属性，比如Google, baidu搜索引擎都是增量型爬虫；他们无时无刻不在抓取数据，还会根据一定算法评价网站的好坏，定期抓取最新数据，以保证他们的搜索结果时效性，正确性；  </li><li>2.批量型爬虫：限制抓取的属性，抓取特定网站的信息；此次我们选用的方法就是批量性爬虫。</li></ul><p>我使用Python完成批量型爬虫的设计与实现，并对抓取数据进行清洗与分析，为什么选择Python？<br>当前比较火的语言之一，语法简单，容易上手，支持面向对象，丰富的第三方模块:  </p><ul><li>1.爬虫相关模块：requests、Bs4、 lxml等;  </li><li>2.数据库相关模块：pyMySQL、pyMongo等；  </li><li>3.数据分析相关模块：numpy,pandas,matplotlib等；  </li><li>4.数据可视化模块：pyecharts</li></ul><p>基于这些模块，快速的构建爬虫，抓取数据，并且对抓取的数据进行分析及可视化。</p><hr><p>需求:<br>1、爬取豆瓣电影top250<br>2、获取电影名称、年份、评分、导演、编剧、主演、类型、国家、语言、时长等<br>3、将爬取的数据保存<br>4、对数据进行清洗，对错误数据在源码或数据中进行处理<br>5、进行数据分析及可视化</p><hr><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>开发环境: python3.9, edge浏览器<br>开发平台: pycharm, jupyter notebook<br>用pip下载依赖库: requests, bs4, lxml, numpy, pandas, pyecharts等  </p><hr><h2 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><hr><p>url: <a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a><br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/20220508134724.png" alt="1"><br>可以看到，在榜单上的信息较少，每个电影详细的信息需要进入链接到详细页面查看。<br>因此我们需要获取每个电影的详细页url.<br>以下为获取子页面url代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/top250?start=0&amp;filter=&#x27;</span></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line">resp.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(resp.text)</span><br><span class="line"></span><br><span class="line">lis = html.xpath(<span class="string">&quot;/html/body/div[3]/div[1]/div/div[1]/ol/li&quot;</span>)</span><br><span class="line"></span><br><span class="line">page_url = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">    page = li.xpath(<span class="string">&quot;./div/div[2]/div[1]/a/@href&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    page_url.append(page)</span><br><span class="line"><span class="built_in">print</span>(page_url)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;https://movie.douban.com/subject/1292052/&#x27;, &#x27;https://movie.douban.com/subject/1291546/&#x27;, &#x27;https://movie.douban.com/subject/1292720/&#x27;, &#x27;https://movie.douban.com/subject/1292722/&#x27;, &#x27;https://movie.douban.com/subject/1295644/&#x27;, &#x27;https://movie.douban.com/subject/1292063/&#x27;, &#x27;https://movie.douban.com/subject/1291561/&#x27;, &#x27;https://movie.douban.com/subject/1295124/&#x27;, &#x27;https://movie.douban.com/subject/3541415/&#x27;, &#x27;https://movie.douban.com/subject/3011091/&#x27;, &#x27;https://movie.douban.com/subject/1889243/&#x27;, &#x27;https://movie.douban.com/subject/1292064/&#x27;, &#x27;https://movie.douban.com/subject/1292001/&#x27;, &#x27;https://movie.douban.com/subject/3793023/&#x27;, &#x27;https://movie.douban.com/subject/2131459/&#x27;, &#x27;https://movie.douban.com/subject/1291549/&#x27;, &#x27;https://movie.douban.com/subject/1307914/&#x27;, &#x27;https://movie.douban.com/subject/25662329/&#x27;, &#x27;https://movie.douban.com/subject/1292213/&#x27;, &#x27;https://movie.douban.com/subject/5912992/&#x27;, &#x27;https://movie.douban.com/subject/1296141/&#x27;, &#x27;https://movie.douban.com/subject/1291841/&#x27;, &#x27;https://movie.douban.com/subject/1849031/&#x27;, &#x27;https://movie.douban.com/subject/6786002/&#x27;, &#x27;https://movie.douban.com/subject/3319755/&#x27;]</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><p>可以看到我们只获得了一部分<br>需要修改start的值获取下一页的内容<br>以下，重构方法类，获取全部url</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">page_url = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">one_page</span>(<span class="params">url</span>):</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    resp.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    html = etree.HTML(resp.text)</span><br><span class="line">    lis = html.xpath(<span class="string">&quot;/html/body/div[3]/div[1]/div/div[1]/ol/li&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        page = li.xpath(<span class="string">&quot;./div/div[2]/div[1]/a/@href&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        page_url.append(page)</span><br><span class="line">    resp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        one_page(<span class="string">f&quot;https://movie.douban.com/top250?start=<span class="subst">&#123;i * <span class="number">25</span>&#125;</span>&amp;filter=&quot;</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="built_in">print</span>(page_url)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;https://movie.douban.com/subject/1292052/&#x27;, ......, &#x27;https://movie.douban.com/subject/2297265/&#x27;]</span><br><span class="line">(链接过多此处省略)</span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><p>可以看到所以子页面url都爬取出来了</p><h3 id="2-子页面信息提取"><a href="#2-子页面信息提取" class="headerlink" title="2.子页面信息提取"></a>2.子页面信息提取</h3><hr><p>子页面分析<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011735901.png" alt="wrong"></p><hr><p>为了方便后面采用的是jupyter实时输出方便修改代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">film_url=<span class="string">&#x27;https://movie.douban.com/subject/1292052/&#x27;</span></span><br><span class="line">request =requests.get(film_url,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line">request.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">film_info=[]</span><br><span class="line">child_page=BeautifulSoup(request.text,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="comment">#排名</span></span><br><span class="line">rank = child_page.find(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;top250-no&#x27;</span>&#125;).text.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#电影名</span></span><br><span class="line">film_name = child_page.find(attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:itemreviewed&#x27;</span>&#125;).text.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>] <span class="comment">#split 将中英文从空格处分开</span></span><br><span class="line"><span class="comment">#导演</span></span><br><span class="line">director = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment">#编剧</span></span><br><span class="line">scriptwriter = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">2</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment">#主演</span></span><br><span class="line">actor = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">3</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment">#类型</span></span><br><span class="line">filmtype = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">4</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>) <span class="comment">#</span></span><br><span class="line"><span class="comment">#制片国家/地区</span></span><br><span class="line">area = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">5</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>) <span class="comment">#</span></span><br><span class="line"><span class="comment">#语言</span></span><br><span class="line">language = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">6</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>) <span class="comment">#</span></span><br><span class="line"><span class="comment">#上映日期</span></span><br><span class="line">initialReleaseDate = <span class="built_in">min</span>(child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">7</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)).split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>] <span class="comment">#</span></span><br><span class="line"><span class="comment">#片长</span></span><br><span class="line">runtime = child_page.find(attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:runtime&#x27;</span>&#125;).text <span class="comment">#</span></span><br><span class="line"><span class="comment">#评分（平均分）</span></span><br><span class="line">rating_num = child_page.find(attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:average&#x27;</span>&#125;).text <span class="comment">#</span></span><br><span class="line"><span class="comment">#五星百分比</span></span><br><span class="line">stars5_rating_per = child_page.find(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;rating_per&#x27;</span>&#125;).text <span class="comment">#</span></span><br><span class="line"><span class="comment">#评价人数</span></span><br><span class="line">rating_people = child_page.find(attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:votes&#x27;</span>&#125;).text <span class="comment">#</span></span><br><span class="line">film_info=[rank,film_name,director,scriptwriter,actor,filmtype,area,language,initialReleaseDate,runtime,rating_num,stars5_rating_per,rating_people]</span><br><span class="line"><span class="built_in">print</span>(film_info)</span><br><span class="line">request.close()</span><br><span class="line">df = pd.DataFrame([film_info])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>输出<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/20220508162637.png" alt="2">  </p><h2 id="清洗和预处理"><a href="#清洗和预处理" class="headerlink" title="清洗和预处理"></a>清洗和预处理</h2><hr><p>有的电影子页面的索引项不同，比如7.千与千寻中出现了官方网站，导致数据出现错位。<br>同样的问题还存在于216.二十二中，此部为纪录片，没有演员等内容。<br>修改代码加上循环<br>两页面的与普通页面不同点:<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011739368.png" alt="wrong"><br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/202206011739376.png" alt="wrong"></p><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">head=[<span class="string">&#x27;rank&#x27;</span>,<span class="string">&#x27;film_name&#x27;</span>,<span class="string">&#x27;director&#x27;</span>,<span class="string">&#x27;scriptwriter&#x27;</span>,<span class="string">&#x27;actor&#x27;</span>,<span class="string">&#x27;filmtype&#x27;</span>,<span class="string">&#x27;area&#x27;</span>,<span class="string">&#x27;language&#x27;</span>,<span class="string">&#x27;initialReleaseDate&#x27;</span>,<span class="string">&#x27;runtime&#x27;</span>,<span class="string">&#x27;rating_num&#x27;</span>,<span class="string">&#x27;stars5_rating_per&#x27;</span>,<span class="string">&#x27;rating_people&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(page_url)):</span><br><span class="line">    href=page_url[i]</span><br><span class="line">    <span class="comment">#print(href)</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">2</span>,<span class="number">7</span>))</span><br><span class="line">    r = requests.get(href,headers=headers)</span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    child_page=BeautifulSoup(r.text,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="comment">#排名</span></span><br><span class="line">    rank = child_page.find(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;top250-no&#x27;</span>&#125;).text.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#电影名</span></span><br><span class="line">    film_name = child_page.find(attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:itemreviewed&#x27;</span>&#125;).text.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>] </span><br><span class="line">    <span class="comment">#导演</span></span><br><span class="line">    director = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">#编剧</span></span><br><span class="line">    scriptwriter = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">2</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">#主演</span></span><br><span class="line">    actor = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">3</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">#类型</span></span><br><span class="line">    filmtype = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">4</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">5</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>] == <span class="string">&#x27;官方网站&#x27;</span>:</span><br><span class="line">        <span class="comment">#制片国家/地区</span></span><br><span class="line">        area = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">6</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="comment">#语言</span></span><br><span class="line">        language = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">7</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>) </span><br><span class="line">        <span class="comment">#上映日期</span></span><br><span class="line">        initialReleaseDate = <span class="built_in">min</span>(child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">8</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)).split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>] </span><br><span class="line">    <span class="keyword">elif</span> rank == <span class="string">&quot;216&quot;</span>:</span><br><span class="line">        <span class="comment">#编剧</span></span><br><span class="line">        scriptwriter = <span class="string">&#x27;无&#x27;</span></span><br><span class="line">        <span class="comment">#主演</span></span><br><span class="line">        actor = <span class="string">&#x27;无&#x27;</span></span><br><span class="line">        <span class="comment">#类型</span></span><br><span class="line">        filmtype = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">2</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>) </span><br><span class="line">        <span class="comment">#制片国家/地区</span></span><br><span class="line">        area = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">3</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="comment">#语言</span></span><br><span class="line">        language = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">4</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>) </span><br><span class="line">        <span class="comment">#上映日期</span></span><br><span class="line">        initialReleaseDate = <span class="built_in">min</span>(child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">5</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)).split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>]    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#制片国家/地区</span></span><br><span class="line">        area = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">5</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="comment">#语言</span></span><br><span class="line">        language = child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">6</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>) </span><br><span class="line">        <span class="comment">#上映日期</span></span><br><span class="line">        initialReleaseDate = <span class="built_in">min</span>(child_page.find(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;info&#x27;</span>&#125;).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">7</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)).split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#片长</span></span><br><span class="line">    runtime = child_page.find(attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:runtime&#x27;</span>&#125;).text </span><br><span class="line">    <span class="comment">#评分（平均分）</span></span><br><span class="line">    rating_num = child_page.find(attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:average&#x27;</span>&#125;).text </span><br><span class="line">    <span class="comment">#五星百分比</span></span><br><span class="line">    stars5_rating_per = child_page.find(attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;rating_per&#x27;</span>&#125;).text </span><br><span class="line">    <span class="comment">#评价人数</span></span><br><span class="line">    rating_people = child_page.find(attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:votes&#x27;</span>&#125;).text</span><br><span class="line"></span><br><span class="line">    film_info=[rank,film_name,director,scriptwriter,actor,filmtype,area,language,initialReleaseDate,runtime,rating_num,stars5_rating_per,rating_people]</span><br><span class="line">    df = pd.DataFrame([film_info])</span><br><span class="line"></span><br><span class="line">    current_path = os.path.dirname(<span class="string">&#x27;__file__&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> film_info[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">        df.to_csv(current_path+<span class="string">&#x27;douban_top250_test.csv&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, header=head, index=<span class="literal">None</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;top<span class="subst">&#123;film_info[<span class="number">0</span>]&#125;</span>爬取完成&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df.to_csv(current_path+<span class="string">&#x27;douban_top250_test.csv&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, header=<span class="literal">False</span>, index=<span class="literal">None</span>, encoding= <span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;top<span class="subst">&#123;film_info[<span class="number">0</span>]&#125;</span>爬取完成&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="加入线程池加快爬取速度"><a href="#加入线程池加快爬取速度" class="headerlink" title="加入线程池加快爬取速度"></a>加入线程池加快爬取速度</h2><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        one_page(<span class="string">f&quot;https://movie.douban.com/top250?start=<span class="subst">&#123;i * <span class="number">25</span>&#125;</span>&amp;filter=&quot;</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;url提取完毕！&quot;</span>)</span><br><span class="line">    <span class="comment"># for j in range(len(page_url)):</span></span><br><span class="line">    <span class="comment">#     childUrl = page_url[j]</span></span><br><span class="line">    <span class="comment">#     child(childUrl)</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(page_url)):</span><br><span class="line">            childUrl = page_url[j]</span><br><span class="line">            t.submit(child, childUrl)</span><br><span class="line">    <span class="comment"># 添加表头</span></span><br><span class="line">    <span class="comment"># 表头</span></span><br><span class="line">    head = [<span class="string">&#x27;rank&#x27;</span>, <span class="string">&#x27;film_name&#x27;</span>, <span class="string">&#x27;director&#x27;</span>, <span class="string">&#x27;scriptwriter&#x27;</span>, <span class="string">&#x27;actor&#x27;</span>, <span class="string">&#x27;filmType&#x27;</span>, <span class="string">&#x27;area&#x27;</span>, <span class="string">&#x27;language&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;initialReleaseDate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;runtime&#x27;</span>, <span class="string">&#x27;rating_num&#x27;</span>, <span class="string">&#x27;stars5_rating_per&#x27;</span>, <span class="string">&#x27;rating_people&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    data = pd.read_csv(<span class="string">r&#x27;douban_top250_test.csv&#x27;</span>, header=<span class="literal">None</span>, names=head, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    data.to_csv(<span class="string">&#x27;douban_top250_test.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;爬取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/20220508184353.png" alt="3"><br>可以看到并不是按顺序爬取的，说明线程池起到了作用，而且爬取速度较普通快几十倍</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/20220508184544.png" alt="4"><br>排序后<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/20220508184641.png" alt="5"></p><p>特定数据的处理结果：<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/20220508184759.png" alt="6"></p>]]></content:encoded>
      
      
      
      <category domain="https://s1nos.cc/tags/python-%E7%88%AC%E8%99%AB/">python, 爬虫</category>
      
      
      <comments>https://s1nos.cc/2022/05/08/22.5.8_1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python爬虫三种数据解析</title>
      <link>https://s1nos.cc/2022/04/20/22.4.20_1/</link>
      <guid>https://s1nos.cc/2022/04/20/22.4.20_1/</guid>
      <pubDate>Wed, 20 Apr 2022 07:34:37 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近在学习爬虫，对爬虫中的数据解析规则作一下记录。</p><h2 id="re解析"><a href="#re解析" class="headerlink" title="re解析"></a>re解析</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.    匹配除换⾏符以外的任意字符</span><br><span class="line">\w   匹配字⺟或数字或下划线</span><br><span class="line">\s   匹配任意的空⽩符</span><br><span class="line">\d   匹配数字</span><br><span class="line">\n   匹配⼀个换⾏符</span><br><span class="line">\t   匹配⼀个制表符</span><br><span class="line"></span><br><span class="line">^    匹配字符串的开始</span><br><span class="line">$    匹配字符串的结尾</span><br><span class="line"></span><br><span class="line">\W   匹配⾮字⺟或数字或下划线</span><br><span class="line">\D   匹配⾮数字</span><br><span class="line">\S   匹配⾮空⽩符</span><br><span class="line">a|b  匹配字符a或字符b</span><br><span class="line">()   匹配括号内的表达式，也表示⼀个组</span><br><span class="line">[…]  匹配字符组中的字符</span><br><span class="line">[^…] 匹配除了字符组中字符的所有字符</span><br></pre></td></tr></table></figure><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*     重复零次或更多次</span><br><span class="line">+     重复⼀次或更多次</span><br><span class="line">?     重复零次或⼀次</span><br><span class="line">&#123;n&#125;   重复n次</span><br><span class="line">&#123;n,&#125;  重复n次或更多次</span><br><span class="line">&#123;n,m&#125; 重复n到m次</span><br></pre></td></tr></table></figure><h3 id="贪婪匹配和惰性匹配"><a href="#贪婪匹配和惰性匹配" class="headerlink" title="贪婪匹配和惰性匹配"></a>贪婪匹配和惰性匹配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.*   贪婪匹配</span><br><span class="line"></span><br><span class="line">.*?  惰性匹配 (让*尽可能少出现的结果)</span><br><span class="line"></span><br><span class="line">.*?  表示尽可能少的匹配, .*表示尽可能多的匹配</span><br></pre></td></tr></table></figure><hr><h2 id="bs4解析"><a href="#bs4解析" class="headerlink" title="bs4解析"></a>bs4解析</h2><p>Beautiful Soup以代码举例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># url</span></span><br><span class="line">url = <span class="string">&quot;https://www.youmeitu.com/weimeitupian/&quot;</span></span><br><span class="line">page = <span class="string">&quot;https://www.youmeitu.com&quot;</span></span><br><span class="line"><span class="comment"># 请求</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment">#用BeautifulSoup处理</span></span><br><span class="line">main_page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">alist = main_page.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;TypeList&quot;</span>).find_all(<span class="string">&quot;a&quot;</span>, class_=<span class="string">&quot;TypeBigPics&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> alist:</span><br><span class="line">    <span class="comment"># 添加链接头，网页为相对路径</span></span><br><span class="line">    href = page + a.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="comment"># 请求子页面</span></span><br><span class="line">    child_resp = requests.get(href)</span><br><span class="line">    child_resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    child_text = child_resp.text</span><br><span class="line">    child_page = BeautifulSoup(child_text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="comment">#找到&lt;img&gt;标签下的src用于下载图片</span></span><br><span class="line">    div = child_page.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;ImageBody&quot;</span>).find(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">    img = div.get(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">    src = page + img</span><br><span class="line">    img_resp = requests.get(src)</span><br><span class="line">    <span class="comment"># img_resp.content</span></span><br><span class="line">    img_name = src.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img/&quot;</span> + img_name, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img_resp.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;over!!! &quot;</span> + img_name)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;all_over!&quot;</span>)</span><br><span class="line"></span><br><span class="line">resp.close()</span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常见检索方法有 x.find(), x.find_all()<br>其中find_all()返回的是迭代器, find只返回第一个值<br>例如上文的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alist = main_page.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;TypeList&quot;</span>).find_all(<span class="string">&quot;a&quot;</span>, class_=<span class="string">&quot;TypeBigPics&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h2><p>xpath 类似于目录索引，较为常用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://chongqing.zbj.com/search/f/?kw=saas&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">html = etree.HTML(resp.text)</span><br><span class="line"></span><br><span class="line">divs = html.xpath(<span class="string">&quot;/html/body/div[6]/div/div/div[2]/div[5]/div[1]/div&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    tile = div.xpath(<span class="string">&quot;./div/div/a[2]/div[2]/div[2]/p/text()&quot;</span>)</span><br><span class="line">    title = <span class="string">&quot;saas&quot;</span>.join(tile)</span><br><span class="line">    price = div.xpath(<span class="string">&quot;./div/div/a[2]/div[2]/div[1]/span[1]/text()&quot;</span>)[<span class="number">0</span>].strip(<span class="string">&quot;¥&quot;</span>)</span><br><span class="line">    company = div.xpath(<span class="string">&quot;./div/div/a[1]/div[1]/p/text()&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">    location = div.xpath(<span class="string">&quot;./div/div/a[1]/div[1]/div/span/text()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(title, price, company, location)</span><br><span class="line"></span><br><span class="line">resp.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>xpath路径可在浏览器中方便取出<br><img src="https://cdn.jsdelivr.net/gh/SinosBlessing/Sinos_cdn@master/img/xpath.png"></p>]]></content:encoded>
      
      
      <category domain="https://s1nos.cc/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://s1nos.cc/tags/%E7%88%AC%E8%99%AB/">爬虫</category>
      
      
      <comments>https://s1nos.cc/2022/04/20/22.4.20_1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>转|基于油猴的力扣题目转换工具 html转markdown 便于写题解</title>
      <link>https://s1nos.cc/2022/04/19/22.4.19_2/</link>
      <guid>https://s1nos.cc/2022/04/19/22.4.19_2/</guid>
      <pubDate>Tue, 19 Apr 2022 08:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>刷力扣的时候，写题解是好习惯，但是每次复制题目，都需要手动修改成markdown格式的，挺麻烦的，于是借助油猴脚本插件，写了这个力扣题目转换工具，功能是将html格式的题目，转换成markdown格式的题目，一键复制粘贴即可很愉快的去写题解了</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>参考<a href="https://blog.zimo.wiki/posts/f027b6b4/">zimo大佬博客</a></p>]]></content:encoded>
      
      
      
      <category domain="https://s1nos.cc/tags/leetcode/">leetcode</category>
      
      
      <comments>https://s1nos.cc/2022/04/19/22.4.19_2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GitHub访问困难问题</title>
      <link>https://s1nos.cc/2022/04/19/22.4.19_1/</link>
      <guid>https://s1nos.cc/2022/04/19/22.4.19_1/</guid>
      <pubDate>Tue, 19 Apr 2022 04:06:20 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="针对-GitHub和-GitHub-pages访问困难有以下两种方法"><a href="#针对-GitHub和-GitHub-pages访问困难有以下两种方法" class="headerlink" title="针对 GitHub和 GitHub pages访问困难有以下两种方法"></a>针对 GitHub和 GitHub pages访问困难有以下两种方法</h2><h3 id="1-修改hosts"><a href="#1-修改hosts" class="headerlink" title="1. 修改hosts"></a>1. 修改hosts</h3><p>在本地的hosts文件中添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#github</span><br><span class="line">69.171.224.40 github.global.ssl.fastly.net</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br><span class="line">140.82.113.4 github.com</span><br><span class="line">140.82.113.4 www.github.com</span><br><span class="line">#github.io</span><br><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>能一定程度上加快加载速度</p><hr><h3 id="2-科学上网"><a href="#2-科学上网" class="headerlink" title="2. 科学上网"></a>2. 科学上网</h3><p>这个各凭本事。。。</p>]]></content:encoded>
      
      
      
      <category domain="https://s1nos.cc/tags/GitHub/">GitHub</category>
      
      
      <comments>https://s1nos.cc/2022/04/19/22.4.19_1/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
